#include <iostream>
#include <sstream>
#include <string>
using namespace std;

void right(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 0;
		for (int i = 0; i<4; i++) {
			if (pole[j][i] != 0) {
				pole[j][n] = pole[j][i]; if (n != i) pole[j][i] = 0; n++; }
		}
		for (int i = 0; i<4; i++) {
			if ((pole[j][i] == pole[j][i + 1]) && (pole[j][i] != 0)) {
				pole[j][i] += pole[j][i + 1]; pole[j][i + 1] = 0; }
		}
		for (int i = 0; i<3; i++) {
		    if (pole[j][i] == 0) {
		      pole[j][i] = pole[j][i + 1]; pole[j][i + 1] = 0; }
		}
	}
}

void left(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 3;
		for (int i = 3; i > -1; i--) {
			if (pole[j][i] != 0) {
				pole[j][n] = pole[j][i]; if (n != i) pole[j][i] = 0; n--; }
		}
		for (int i = 3; i > -1; i--) {
			if ((pole[j][i] == pole[j][i - 1]) && (pole[j][i] != 0)) {
				pole[j][i] += pole[j][i - 1]; pole[j][i - 1] = 0; }
		}
		for (int i = 3; i > 0; i--) {
			if (pole[j][i] == 0) {
				pole[j][i] = pole[j][i - 1]; pole[j][i - 1] = 0; }
		}
	}
}

void down(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 0;
		for (int i = 0; i < 4; i++) {
			if (pole[i][j] != 0) {
				pole[n][j] = pole[i][j]; if (n != i) pole[i][j] = 0; n++; }
		}
		for (int i = 0; i<4; i++) {
			if ((pole[i][j] == pole[i + 1][j]) && (pole[i][j] != 0)) {
				pole[i][j] += pole[i + 1][j]; pole[i + 1][j] = 0; }
		}
		for (int i = 0; i<3; i++) {
			if (pole[i][j] == 0) {
				pole[i][j] = pole[i + 1][j]; pole[i + 1][j] = 0; }
		}
	}
}

void up(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 3;
		for (int i = 3; i > -1; i--) {
			if (pole[i][j] != 0) {
				pole[n][j] = pole[i][j]; if (n != i) pole[i][j] = 0; n--; }
		}
		for (int i = 3; i > -1; i--) {
			if ((pole[i][j] == pole[i - 1][j]) && (pole[i][j] != 0)) {
				pole[i][j] += pole[i - 1][j]; pole[i - 1][j] = 0; }
		}
		for (int i = 3; i > 0; i--) {
			if (pole[i][j] == 0) {
				pole[i][j] = pole[i - 1][j]; pole[i - 1][j] = 0; }
		}
	}
}

void printpole(int pole[4][4]) {
	for (int i = 0; i < 4; i++){
		for (int j = 0; j < 4; j++) {
			if (pole[i][j] != 0) cout << pole[i][j] << " ";
			else cout << '*' << " ";
		}
		cout << endl;
	}
	cout << endl;
}

bool readpole(int matrix[4][4]) {
	bool result = true;
	for (int i = 0; i<4; i++) {
		string string;
		getline(cin, string);
		istringstream stream(string);
		for (int j = 0; j < 4; ++j) {
			if (!(stream >> matrix[i][j])) {
				result = false;
				break;
			}
		}
	}
	return result;
}

int main()
{
	int pole[4][4];
	string znak;
	if (readpole(pole)) {
		getline(cin, znak);
		if (znak == "l") {
			right(pole); printpole(pole);
		}
		else if (znak == "h") {
			left(pole); printpole(pole);
		}
		else if (znak == "j") {
			down(pole); printpole(pole);
		}
		else if (znak == "k") {
			up(pole); printpole(pole);
		}
		else if (znak == "q") {
			cout << "End" << endl; return -1;
		}
		else { cout << "Incorrect simbol" << endl; }
	}
	else { cout << "Error" << endl; exit(0); }
}
